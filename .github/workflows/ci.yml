name: TruffleHog and SonarQube CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  secretscan:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install TruffleHog
        run: |
          pip install trufflehog

      - name: Run TruffleHog (full source scan)
        run: |
          trufflehog filesystem . --json > trufflehog-results.json || true

      - name: Show TruffleHog Findings (if any)
        run: |
          if grep -q '"sourceMetadata"' trufflehog-results.json; then
            echo "🔐 TruffleHog findings:"
            jq -c '.[]' trufflehog-results.json | while read -r result; do
              reason=$(echo "$result" | jq -r '.reason')
              file=$(echo "$result" | jq -r '.sourceMetadata.data.source_id')
              line=$(echo "$result" | jq -r '.sourceMetadata.data.line')
              content=$(echo "$result" | jq -r '.sourceMetadata.data.line_content')
              echo "🔸 Reason: $reason"
              echo "📄 File: $file"
              echo "📌 Line: $line"
              echo "📄 Content: $content"
              echo "---"
            done
          else
            echo "✅ No secrets detected by TruffleHog"
          fi

      - name: Fail if Secrets Found
        run: |
          if grep -q '"sourceMetadata"' trufflehog-results.json; then
            echo "❌ TruffleHog found secrets in code"
            exit 1
          fi

  sonarqube:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    needs: secretscan

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Run SonarQube Scanner
        run: |
          npm install -g sonarqube-scanner
          sonar-scanner \
            -Dsonar.projectKey=bad-node-app \
            -Dsonar.sources=src \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Wait for SonarQube Quality Gate
        id: quality-gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Fail if Quality Gate failed
        run: |
          if [ "${{ steps.quality-gate.outputs.quality-gate-status }}" != "PASSED" ]; then
            echo "❌ SonarQube Quality Gate failed"
            exit 1
          else
            echo "✅ SonarQube Quality Gate passed"
          fi

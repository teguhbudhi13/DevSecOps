name: Gitleaks and SonarQube CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  gitleaks-secret-scan:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install Gitleaks
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.27.2/gitleaks_8.27.2_linux_x64.tar.gz
          tar -xzvf gitleaks_8.27.2_linux_x64.tar.gz
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin/gitleaks

      - name: Run Gitleaks Scan with Custom Config
        run: |
          gitleaks detect --no-git --source . \
            --report-format json \
            --config gitleaks.toml \
            --report-path gitleaks-report.json || true

          echo "====== GITLEAKS FINDINGS ======"
          jq -r '.[] | "File: \(.File)\nLine: \(.StartLine)\n---"' gitleaks-report.json || echo "No leaks found or report missing."

          leaks_count=$(jq '. | length' gitleaks-report.json)
          if [ "$leaks_count" -gt 0 ]; then
            echo "❌ Gitleaks found secrets in the codebase!"
            exit 1
          else
            echo "✅ No secrets found by Gitleaks."
          fi

  sonarqube:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    needs: gitleaks-secret-scan

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Run SonarQube Scanner
        run: |
          npm install -g sonarqube-scanner
          sonar-scanner \
            -Dsonar.projectKey=bad-node-app \
            -Dsonar.sources=src \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Wait for SonarQube Quality Gate
        id: quality-gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Fail if Quality Gate failed
        run: |
          if [ "${{ steps.quality-gate.outputs.quality-gate-status }}" != "PASSED" ]; then
            echo "❌ SonarQube Quality Gate failed"
            exit 1
          else
            echo "✅ SonarQube Quality Gate passed"
          fi
